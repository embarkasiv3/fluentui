// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Component Examples renders Layer.Hosted.Example.tsx correctly 1`] = `
<div>
  <div
    className="ms-Toggle is-checked is-enabled root-285"
  >
    <label
      className="ms-Label ms-Toggle-label label-230"
      htmlFor="Toggle0"
    >
      Show host
    </label>
    <div
      className="ms-Toggle-innerContainer container-286"
    >
      <button
        aria-disabled={undefined}
        aria-label="Show host"
        aria-pressed={true}
        checked={true}
        className="ms-Toggle-background pill-356"
        data-is-focusable={true}
        disabled={undefined}
        id="Toggle0"
        onChange={[Function]}
        onClick={[Function]}
        type="button"
      >
        <div
          className="ms-Toggle-thumb thumb-357"
        />
      </button>
    </div>
  </div>
  <div
    className="ms-LayerHost LayerExample-customHost"
    id="layerhost1"
  />
  <p
    id="foo"
  >
    In some cases, you may need to contain layered content within an area. Create an instance of a LayerHost along with an id, and provide a hostId on the layer to render it within the specific host. (Note that it's important that you don't include children within the LayerHost. It's meant to contain Layered content only.)
  </p>
  <button
    aria-checked={false}
    aria-describedby={undefined}
    aria-disabled={undefined}
    aria-label={undefined}
    aria-labelledby={undefined}
    aria-posinset={undefined}
    aria-setsize={undefined}
    checked={false}
    className="ms-Checkbox is-enabled root-189"
    data-ktp-execute-target={undefined}
    disabled={undefined}
    id="checkbox-1"
    name={undefined}
    onBlur={[Function]}
    onClick={[Function]}
    onFocus={[Function]}
    role="checkbox"
    type="button"
  >
    <label
      className="ms-Checkbox-label label-184"
      htmlFor="checkbox-1"
    >
      <div
        className="ms-Checkbox-checkbox checkbox-190"
        data-ktp-target={undefined}
      >
        <i
          aria-hidden={true}
          className="ms-Checkbox-checkmark checkmark-192"
          data-icon-name="CheckMark"
          role="presentation"
        >
          
        </i>
      </div>
      <span
        className="ms-Checkbox-text text-187"
      >
        Render the box below in a Layer and target it at hostId=layerhost1
      </span>
    </label>
  </button>
  <div
    className="LayerExample-content css-360"
  >
    This is example layer content.
  </div>
  <div
    className="LayerExample-nonLayered"
  >
    I am normally below the content.
  </div>
  <p>
    If you do not specify a hostId then the hosted layer will default to being fixed to the page by default.
  </p>
  <button
    aria-checked={false}
    aria-describedby={undefined}
    aria-disabled={undefined}
    aria-label={undefined}
    aria-labelledby={undefined}
    aria-posinset={undefined}
    aria-setsize={undefined}
    checked={false}
    className="ms-Checkbox is-enabled root-189"
    data-ktp-execute-target={undefined}
    disabled={undefined}
    id="checkbox-2"
    name={undefined}
    onBlur={[Function]}
    onClick={[Function]}
    onFocus={[Function]}
    role="checkbox"
    type="button"
  >
    <label
      className="ms-Checkbox-label label-184"
      htmlFor="checkbox-2"
    >
      <div
        className="ms-Checkbox-checkbox checkbox-190"
        data-ktp-target={undefined}
      >
        <i
          aria-hidden={true}
          className="ms-Checkbox-checkmark checkmark-192"
          data-icon-name="CheckMark"
          role="presentation"
        >
          
        </i>
      </div>
      <span
        className="ms-Checkbox-text text-187"
      >
        Render the box below in a Layer without specifying a host, fixing it to the top of the page
      </span>
    </label>
  </button>
  <div
    className="LayerExample-content css-360"
  >
    This is example layer content.
  </div>
</div>
`;
