import { DEFINITION_LOOKUP_TABLE, SEQUENCE_PREFIX } from './constants';
import { hashString } from './runtime/utils/hashString';
import { MakeStylesMatchedDefinitions } from './types';

// Contains a mapping of previously resolved sequences of atomic classnames
const axResults: Record<string, string> = {};

/**
 * Function can take any number of arguments, joins classes together and deduplicates atomic declarations generated by
 * `makeStyles()`.
 *
 * Classnames can be of any length, this function can take both atomic declarations and class names.
 *
 * Input:
 * ```
 * // not real classes
 * ax('ui-button', 'displayflex', 'displaygrid')
 * ```
 *
 * Output:
 * ```
 * 'ui-button displaygrid'
 * ```
 */
export function ax(...classNames: (string | false | undefined)[]): string;

export function ax(): string {
  // arguments are parsed manually to avoid double loops as TS & Babel transforms rest via an additional loop
  // @see https://babeljs.io/docs/en/babel-plugin-transform-parameters

  let resultClassName = '';
  // Is used as a cache key to avoid object merging
  let sequenceMatch = '';

  const sequenceMappings: MakeStylesMatchedDefinitions[] = [];

  for (let i = 0; i < arguments.length; i++) {
    // eslint-disable-next-line prefer-rest-params
    const argument = arguments[i];

    if (typeof argument === 'string') {
      // All classes generated by `makeStyles()` are prefixed by a sequence hash, this allows to identify class sets
      // without parsing each className in a string
      const sequenceIndex = argument.indexOf(SEQUENCE_PREFIX);

      if (sequenceIndex === -1) {
        resultClassName += argument + ' ';
      } else {
        const sequenceId = argument.slice(sequenceIndex, sequenceIndex + 9);
        const sequenceMapping = DEFINITION_LOOKUP_TABLE[sequenceId];

        // Handles a case with mixed classnames, i.e. "ui-button ATOMIC_CLASSES"
        if (sequenceIndex > 0) {
          resultClassName += argument.slice(0, sequenceIndex);
        }

        if (sequenceMapping) {
          sequenceMatch += sequenceId;
          sequenceMappings.push(sequenceMapping);
        }
      }

      if (process.env.NODE_ENV !== 'production') {
        if (argument.indexOf(SEQUENCE_PREFIX, sequenceIndex + 1) !== -1) {
          // eslint-disable-next-line no-console
          console.error(
            "ax(): a passed string contains multiple identifiers of atomic classes, it's possible that passed " +
              'classes were concatenated in a wrong way. Source string: ' +
              argument,
          );
        }
      }
    }
  }

  if (sequenceMatch === '') {
    // .slice() there and later allows to avoid trailing space
    return resultClassName.slice(0, -1);
  }
  const axResult = axResults[sequenceMatch];

  if (axResult !== undefined) {
    return resultClassName + axResult;
  }

  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  // eslint-disable-next-line prefer-spread
  const resultDefinitions: MakeStylesMatchedDefinitions = Object.assign.apply<MakeStylesMatchedDefinitions[]>(
    Object,
    // .assign() mutates the first object, we can't mutate mappings as it will produce invalid results later
    [{}].concat(sequenceMappings),
  );

  let atomicClassNames = '';

  // eslint-disable-next-line guard-for-in
  for (const property in resultDefinitions) {
    atomicClassNames += resultDefinitions[property][0] + ' ';
  }

  atomicClassNames = atomicClassNames.slice(0, -1);

  // Each merge of classes generates a new sequence of atomic classes that needs to be registered
  const newSequenceHash = SEQUENCE_PREFIX + hashString(atomicClassNames);
  atomicClassNames = newSequenceHash + ' ' + atomicClassNames;

  axResults[sequenceMatch] = atomicClassNames;
  DEFINITION_LOOKUP_TABLE[newSequenceHash] = resultDefinitions;

  return resultClassName + atomicClassNames;
}
