import { IComponent, IComponentStyles, IHTMLDivSlot, IStyleableComponentProps } from '../../Foundation';
import { ITextSlot } from '../../Text';
import { IBaseProps } from '../../Utilities';

export type I{{componentName}}Component =
  IComponent< I{{componentName}}Props, I{{componentName}}ViewProps, I{{componentName}}Tokens, I{{componentName}}Styles>;

// Optional interface to use for componentRef. This should be limited in scope with the most common scenario being for focusing elements.
export interface I{{componentName}} { }

export interface I{{componentName}}Slots {
  // All props for your component are to be defined here.
  /**
   * Root element.
   */
  root?: IHTMLDivSlot;

  /**
   * Component sample prop. If provided, component is controlled.
   * @default defaultText
   */
  text?: ITextSlot;
}

// Extending IStyleableComponentProps will automatically add styleable props for you, such as styles, tokens and theme.
//    If you don't want these props to be included in your component, just remove this extension.
export interface I{{componentName}}Props extends
  I{{componentName}}Slots,
  IStyleableComponentProps< I{{componentName}}ViewProps, I{{componentName}}Tokens, I{{componentName}}Styles>,
  IBaseProps< I{{componentName}}> {
  // All props for your component are to be defined here.
  /**
   * Component sample default prop for use if component is uncontrolled.
   * @default 'Default Text'
   */
  defaultText?: string;

  // Setting this prop to true will apply different styling to the text slot.
  warning?: boolean;
}

export type I{{componentName}}ViewProps = I{{componentName}}Props &
  {
    // You can define view only props here.
    /**
    * Sample prop internal to component. These types of props aren't exposed
    *   externally to consumers and their values are typically determined by component state.
    */
    status: string;
  };

export interface I{{componentName}}Tokens {
  // Define tokens for your component here. Tokens are styling 'knobs' that your component will automatically
  //    apply to styling sections in the styles file.
  textColor?: string;
}

export type I{{componentName}}Styles = IComponentStyles< I{{componentName}}Slots>;
